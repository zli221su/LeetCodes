class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> result = new ArrayList<>();
        if (digits == null || digits.length() == 0) {
            return result;
        }
        StringBuilder sb = new StringBuilder();
        char[][] cases = new char[][]{new char[0], new char[0], new char[]{'a','b','c'}, new char[]{'d','e','f'}, new char[]{'g','h','i'}, new char[]{'j','k','l'}, new char[]{'m','n','o'}, new char[]{'p','q','r','s'}, new char[]{'t','u','v'}, new char[]{'w','x','y','z'}};
        helper(digits, result, sb, 0, cases);
        return result;
    }
    private void helper(String digits, List<String> result, StringBuilder sb, int index, char[][] cases) {
        if (index == digits.length()) {
            result.add(sb.toString());
            return;
        }
        for (char charact : cases[(int)digits.charAt(index) - 48]) {
            sb.append(charact);
            helper(digits, result, sb, index + 1, cases);
            sb.deleteCharAt(sb.length() - 1);
        }
    }
}

// time complexity: O((case amount)^n);
// space complexity: O(n)