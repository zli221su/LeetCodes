class Solution {
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return 0;
        }
        int result = 0;
        for(int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == '2') {
                    continue;
                }
                if (grid[i][j] == '1') {
                    extend(grid, i, j);
                    result++;
                }
                grid[i][j] = '2';
            }
        }
        return result;
    }
    private void extend(char[][] grid, int i, int j){
        if (grid[i][j] == '0') {
            grid[i][j] = '2';
            return;
        }
        grid[i][j] = '2';
        //up
        if (i > 0 && grid[i - 1][j] != '2'){
            extend(grid, i - 1, j);
        }
        //down
        if (i < (grid.length - 1) && grid[i + 1][j] != '2') {
            extend(grid, i + 1, j);
        }
        //left
        if (j > 0 && grid[i][j - 1] != '2') {
            extend(grid, i, j - 1);
        }
        //right
        if (j < (grid[0].length - 1) && grid[i][j + 1] != '2') {
            extend(grid, i, j + 1);
        }
    }
}
//time complexity: O(n)
//space complexity: O(1) (since did inplace)