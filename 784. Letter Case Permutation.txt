class Solution {
    public List<String> letterCasePermutation(String S) {
        List<String> result = new ArrayList<>();
        if (S == null) {
            return result;
        }
        if (S.length() == 0) {
            result.add("");
            return result;
        }
        char[] str = S.toCharArray();
        helper(0, str, result);
        return result;
    }
    private void helper(int level, char[] str, List<String> result) {
        if(level == str.length) {
            result.add(new String(str));
            return;
        }
        if(str[level] >= 97 && str[level] <= 122) {
            str[level] -= 32;
            helper(level + 1, str, result);
            str[level] += 32;
        }
        else if(str[level] >= 65 && str[level] <= 90) {
            str[level] += 32;
            helper(level + 1, str, result);
            str[level] -= 32;
        }
        helper(level + 1, str, result);
        return;
    }
}

//time complexity: O(2^n)
//space complexity: O(n)