class Solution {
    public String longestPalindrome(String s) {
        int maxLength = 0;
        int targetLeft = 0;
        if (s == null || s.length() == 0) {
            return new String();
        }
        for (int i = 0; i < s.length(); i++) {
            for (int j = 0; j <= 1 && (i + j) < s.length(); j++) {
                int left = extendPosition(s, i, i + j);
                if (((i - left) * 2 + j + 1) > maxLength) {
                    targetLeft = left;
                    maxLength = (i - left) * 2 + j + 1;
                }
            }
        }
        return s.substring(targetLeft, targetLeft + maxLength);
        
    }
    private int extendPosition(String s, int first, int second) {
        int left = first;
        int right = second;
        while (left >= 0 && right < s.length()) {
            if (s.charAt(left) != s.charAt(right)) {
                return left + 1;
            }
            left--;
            right++;
        }
        return left + 1;
    }
}

//time complexity O(n^2)
//space complexity O(1)