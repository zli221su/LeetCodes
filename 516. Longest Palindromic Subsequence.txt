class Solution {
    public int longestPalindromeSubseq(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        int[][] map = new int[s.length()][s.length()];
        for (int i = 0; i < s.length(); i++) {
            map[i][i] = 1;
        }
        for (int span = 1; span < s.length(); span++) {
            for(int i = 0; i + span < s.length(); i++) {
                int j = i + span;
                if (s.charAt(i) == s.charAt(j)) {
                    map[i][j] = map[i + 1][j - 1] + 2;
                }
                else {
                    map[i][j] = Math.max(map[i + 1][j], map[i][j - 1]);
                }
            }
        }
        return map[0][s.length() - 1];
    }
}

// time complexity: O(n^2)
// space complexity: O(n^2)